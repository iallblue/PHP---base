<?php

/*------------ 对象比较 ------------*/
	/**
	 * == 两个对象的属性和属性值都相等 而且两个对象是同一个类的实例 则他们相等
	 * 而如果使用全等运算符（===），这两个对象变量一定要指向某个类的同一个实例（即同一个对象）。 
	 */



/*------------ 类型约束 ------------*/
	/**
	 * 显式在函数参数中 明确只有指定类的参数才行
	 */
	


/*------------ 对象引用 ------------*/
	/**
	 * 对象赋值 通过类似于 “引用”
	 * 在php5，一个对象变量已经不再保存整个对象的值。
	 * 只是保存一个标识符来访问真正的对象内容。 当对象作为参数传递，
	 * 作为结果返回，或者赋值给另外一个变量，
	 * 另外一个变量跟原来的不是引用的关系，
	 * 只是他们都保存着同一个标识符的拷贝，这个标识符指向同一个对象的真正内容。 
	 */
	class A {
	    public $foo = 1;
	}  

	$a = new A;
	$b = $a;   	 // 主要是因为 $a 是对象 
				 // $a ,$b都是同一个标识符的拷贝(其实最后的作用等同于引用)
	             // ($a) = ($b) = <id>
	$b->foo = 2;
	echo $a->foo."\n";


	$c = new A;
	$d = &$c;    // $c ,$d是引用
	             // ($c,$d) = <id>

	$d->foo = 2;
	echo $c->foo."\n";


	// $e = new A;

	// function foo($obj) {
	//     // ($obj) = ($e) = <id>
	//     $obj->foo = 2;
	// }

	// foo($e);
	// echo $e->foo."\n";
	echo "--------------<br>";
	$a = 100;
	$b = $a; //和对象不一样 对象可以看做时引用传递(=)
	$b = 200;
	echo $a;

/*------------ 对象序列化 ------------*/
	/**
	 * serialize()
	 * 将对象变成字符串流
	 */


